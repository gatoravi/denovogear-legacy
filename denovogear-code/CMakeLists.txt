##############################################################
#  Denovogear Project Configuration
#
CMAKE_MINIMUM_REQUIRED(VERSION 2.8 FATAL_ERROR)

## Compiling Options

SET(USE_STATIC_LIBS OFF CACHE BOOL "Link against static libraries.")
SET(CMAKE_VERBOSE_MAKEFILE ON CACHE BOOL "Turn on Verbose Makefiles" FORCE)

## Important Variables

SET(CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/Modules")
SET(CMAKE_BUILD_TYPE_INIT "RelWithDebInfo")
SET_PROPERTY(GLOBAL PROPERTY FIND_LIBRARY_USE_LIB64_PATHS ON)

IF(USE_STATIC_LIBS)
ENDIF(USE_STATIC_LIBS)

## Project DeNovoGear

PROJECT(DeNovoGear)

## Specify Project Information

SET(PROJ_NAME "denovogear")
SET(PROJ_NAME_PRO "DeNovoGear")
SET(PROJ_EMAIL "dng@scit.us")

################################################################################
# Version Information

## Hard Coded Project Version Information

#SET(PROJ_VERSION_MAJOR 0)
#SET(PROJ_VERSION_MINOR 0)
#SET(PROJ_VERSION_PATCH 0)
#SET(PROJ_VERSION_BRANCH current)
#SET(PROJ_VERSION_REV 0)

## Detect Project Version Information

FIND_PACKAGE(Git)
IF(GIT_FOUND)
  EXECUTE_PROCESS(COMMAND ${GIT_EXECUTABLE} describe --tags
    RESULT_VARIABLE res_var OUTPUT_VARIABLE GIT_COM_ID
     ERROR_QUIET)
  IF(${res_var} EQUAL 0 )
   	STRING( REPLACE "\n" "" GIT_COMMIT_ID "${GIT_COM_ID}" )
  ENDIF()
ENDIF()

# try directory name
IF(NOT GIT_COMMIT_ID AND PROJECT_SOURCE_DIR MATCHES
  "denovogear-([-a-zA-Z0-9.])$" )
  SET(GIT_COMMIT_ID "${CMAKE_MATCH_1}")
ENDIF()

# extract project info
IF(GIT_COMMIT_ID MATCHES
  "v?([0-9]+)?(\\.([0-9]+))?(\\.([0-9]+))?(-([a-zA-Z]+))?(-([0-9]+-g[0-9A-Fa-f]+))?$" )
  IF(NOT DEFINED PROJ_VERSION_MAJOR)
    SET(PROJ_VERSION_MAJOR "${CMAKE_MATCH_1}")
  ENDIF()
  IF(NOT DEFINED PROJ_VERSION_MINOR)
    SET(PROJ_VERSION_MINOR "${CMAKE_MATCH_3}")
  ENDIF()
  IF(NOT DEFINED PROJ_VERSION_PATCH)
    SET(PROJ_VERSION_PATCH "${CMAKE_MATCH_5}")
  ENDIF()
  IF(NOT DEFINED PROJ_VERSION_BRANCH)
    SET(PROJ_VERSION_BRANCH "${CMAKE_MATCH_7}")
  ENDIF()
  IF(NOT DEFINED PROJ_VERSION_REV)
    SET(PROJ_VERSION_REV "${CMAKE_MATCH_9}")
  ENDIF()
ENDIF()

# rebuild version info
SET(PROJ_VERSION "${PROJ_VERSION_MAJOR}")
IF(PROJ_VERSION_MINOR)
  SET(PROJ_VERSION "${PROJ_VERSION}.${PROJ_VERSION_MINOR}")
ENDIF()
IF(PROJ_VERSION_PATCH)
  SET(PROJ_VERSION "${PROJ_VERSION}.${PROJ_VERSION_PATCH}")
ENDIF()
IF(PROJ_VERSION_BRANCH)
  SET(PROJ_VERSION "${PROJ_VERSION}-${PROJ_VERSION_BRANCH}")
ENDIF()
IF(PROJ_VERSION_REV)
  SET(PROJ_VERSION "${PROJ_VERSION}-${PROJ_VERSION_REV}")
ENDIF()
IF(NOT PROJ_VERSION)
  SET(PROJ_VERSION "unknown")
ENDIF()

################################################################################
# Packaging Information

IF(APPLE)
  IF(NOT DEFINED APPLE_BUNDLE)
	SET(APPLE_BUNDLE ON)
  ENDIF(NOT DEFINED APPLE_BUNDLE)
  IF(NOT DEFINED APPLE_BUNDLE_APP)
    SET(APPLE_BUNDLE_APP OFF)
  ENDIF(NOT DEFINED APPLE_BUNDLE_APP)
ELSE(APPLE)
  SET(APPLE_BUNDLE OFF)
  SET(APPLE_BUNDLE_APP OFF)
ENDIF(APPLE)

IF(APPLE_BUNDLE)
  # Create 32-bit Universal Binary
  # SET(CMAKE_OSX_ARCHITECTURES "ppc;i386")
  # SET(CPACK_SYSTEM_NAME "${CMAKE_SYSTEM_NAME}-universal")
  IF(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
    SET(CMAKE_INSTALL_PREFIX "/Applications")
  ENDIF(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
ENDIF(APPLE_BUNDLE)

IF(WIN32 AND NOT UNIX)
  SET(PROJ_DIR)
ELSEIF(APPLE_BUNDLE)
  SET(PROJ_DIR)
ELSE(WIN32 AND NOT UNIX)
  SET(PROJ_DIR "/${PROJ_NAME}-${PROJ_VERSION}")
ENDIF(WIN32 AND NOT UNIX)

SET(CMAKE_DATA_DIR "share${PROJ_DIR}" CACHE STRING
  "Install location for data (relative to prefix).")
SET(CMAKE_DOC_DIR "doc${PROJ_DIR}" CACHE STRING
  "Install location for documentation (relative to prefix).")
SET(CMAKE_MAN_DIR "man" CACHE STRING
  "Install location for man pages (relative to prefix).")
MARK_AS_ADVANCED(CMAKE_DATA_DIR CMAKE_DOC_DIR CMAKE_MAN_DIR)

SET(CPACK_SOURCE_IGNORE_FILES
  "/CVS/" "/\\\\.svn/"  "\\\\.swp$"  "\\\\.#"  "/#"  ".*~$"
  "/\\\\.git/"
  "/CMakeFiles/"  "CMakeCache\\\\.txt$"
  "CPack.*Config\\\\.cmake$"  "cmake_install\\\\.cmake$"
  "install_manifest\\\\.txt$"
  "_CPACK_PACKAGES"  "_CPack_Packages"
  "\\\\.vcproj$"  "\\\\.dir$"  "\\\\.ncb$"  "\\\\.sln$"  "\\\\.suo$"
  "Makefile$" "\\\\.ilk$"  "\\\\.pdb$"
  "/releng/" "\\\\.a$"
  "${PROJ_NAME}[-]${PROJ_VERSION_MAJOR}" "${PROJ_NAME}$" "${PROJ_NAME}\\\\.exe"
)

SET(CPACK_PACKAGE_DESCRIPTION_SUMMARY "Discover de novo mutations from deep-sequencing of related individuals.")
SET(CPACK_PACKAGE_VENDOR "Conrad and Cartwright Labs")
SET(CPACK_PACKAGE_EXECUTABLES "denovogear" "DeNovoGear")
SET(CPACK_CREATE_DESKTOP_LINKS "denovogear")

SET(CPACK_PACKAGE_INSTALL_DIRECTORY ${PROJ_NAME_PRO})
SET(CPACK_PACKAGE_NAME ${PROJ_NAME_PRO})
SET(CPACK_PACKAGE_NAME_FILE ${PROJ_NAME})
SET(CPACK_PACKAGE_VERSION ${PROJ_VERSION})
SET(CPACK_PACKAGE_VERSION_MAJOR ${PROJ_VERSION_MAJOR})
SET(CPACK_PACKAGE_VERSION_MINOR ${PROJ_VERSION_MINOR})
SET(CPACK_PACKAGE_VERSION_PATCH ${PROJ_VERSION_PATCH})
SET(CPACK_PACKAGE_DESCRIPTION_FILE "${CMAKE_CURRENT_SOURCE_DIR}/README.txt")
SET(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_CURRENT_SOURCE_DIR}/COPYING.txt")

SET(CPACK_SOURCE_PACKAGE_FILE_NAME "${CPACK_PACKAGE_NAME_FILE}-${CPACK_PACKAGE_VERSION}")

IF(NOT DEFINED CPACK_SYSTEM_NAME)
# make sure package is not Cygwin-unknown, for Cygwin just
# cygwin is good for the system name
  IF("${CMAKE_SYSTEM_NAME}" STREQUAL "CYGWIN")
    SET(CPACK_SYSTEM_NAME Cygwin)
  ELSE("${CMAKE_SYSTEM_NAME}" STREQUAL "CYGWIN")
    SET(CPACK_SYSTEM_NAME ${CMAKE_SYSTEM_NAME}-${CMAKE_SYSTEM_PROCESSOR})
  ENDIF("${CMAKE_SYSTEM_NAME}" STREQUAL "CYGWIN")
ENDIF(NOT DEFINED CPACK_SYSTEM_NAME)
IF(${CPACK_SYSTEM_NAME} MATCHES Windows)
  IF(CMAKE_CL_64)
    SET(CPACK_SYSTEM_NAME win64-${CMAKE_SYSTEM_PROCESSOR})
  ELSE(CMAKE_CL_64)
    SET(CPACK_SYSTEM_NAME win32-${CMAKE_SYSTEM_PROCESSOR})
  ENDIF(CMAKE_CL_64)
ENDIF(${CPACK_SYSTEM_NAME} MATCHES Windows)

IF(NOT DEFINED CPACK_PACKAGE_FILE_NAME)
# if the CPACK_PACKAGE_FILE_NAME is not defined by the cache
# default to source package - system, on cygwin system is not 
# needed
  IF(CYGWIN)
    SET(CPACK_PACKAGE_FILE_NAME "${CPACK_SOURCE_PACKAGE_FILE_NAME}")
  ELSE(CYGWIN)
    SET(CPACK_PACKAGE_FILE_NAME 
      "${CPACK_SOURCE_PACKAGE_FILE_NAME}-${CPACK_SYSTEM_NAME}")
  ENDIF(CYGWIN)
ENDIF(NOT DEFINED CPACK_PACKAGE_FILE_NAME)

IF(WIN32 AND NOT UNIX)
  # There is a bug in NSI that does not handle full unix paths properly. Make
  # sure there is at least one set of four (4) backlasshes.
  #SET(CPACK_PACKAGE_ICON "${CMAKE_SOURCE_DIR}/Utilities/Release\\\\InstallIcon.bmp")
  SET(CPACK_NSIS_INSTALLED_ICON_NAME "bin\\\\denovogear.exe")
  SET(CPACK_NSIS_HELP_LINK "http:\\\\\\\\")
  SET(CPACK_NSIS_URL_INFO_ABOUT "http:\\\\\\\\")
  SET(CPACK_NSIS_CONTACT "dng@scit.us")
  SET(CPACK_NSIS_DISPLAY_NAME "${PROJ_NAME_PRO} ${PROJ_VERSION}")
  SET(CPACK_NSIS_MODIFY_PATH ON)
ELSEIF(APPLE)
  SET(CPACK_GENERATOR "PackageMaker")
  SET(CPACK_SOURCE_GENERATOR "TGZ") 
  IF(APPLE_BUNDLE)
    # make sure CMAKE_INSTALL_PREFIX ends in /
    STRING(LENGTH "${CMAKE_INSTALL_PREFIX}" LEN)
    MATH(EXPR LEN "${LEN} -1" )
    STRING(SUBSTRING "${CMAKE_INSTALL_PREFIX}" ${LEN} 1 ENDCH)
    IF(NOT "${ENDCH}" STREQUAL "/")
      SET(CMAKE_INSTALL_PREFIX "${CMAKE_INSTALL_PREFIX}/")
    ENDIF(NOT "${ENDCH}" STREQUAL "/")
    SET(CPACK_PACKAGE_DEFAULT_LOCATION ${CMAKE_INSTALL_PREFIX})
    SET(PROJ_BUNDLE_NAME "${PROJ_NAME} ${PROJ_VERSION}")
	IF(APPLE_BUNDLE_APP)
	  SET(PROJ_BUNDLE_LOCATION "../..")
      SET(CPACK_PACKAGING_INSTALL_PREFIX "/${PROJ_BUNDLE_NAME}.app/Contents")
      SET(CMAKE_INSTALL_PREFIX 
        "${CMAKE_INSTALL_PREFIX}${CMAKE_BUNDLE_NAME}.app/Contents")
	ELSE(APPLE_BUNDLE_APP)
	  SET(CPACK_PACKAGING_INSTALL_PREFIX "/${PROJ_BUNDLE_NAME}")
      SET(CMAKE_INSTALL_PREFIX "${CMAKE_INSTALL_PREFIX}${CMAKE_BUNDLE_NAME}")
    ENDIF(APPLE_BUNDLE_APP)
    #CONFIGURE_FILE("postflight.sh.in" "postflight.sh")	  
    #SET(CPACK_POSTFLIGHT_SCRIPT "postflight.sh")
	ELSE(APPLE_BUNDLE)
  ENDIF(APPLE_BUNDLE)
ELSE(WIN32 AND NOT UNIX)
  SET(CPACK_GENERATOR "TGZ")
  SET(CPACK_SOURCE_GENERATOR "TGZ") 
  SET(CPACK_STRIP_FILES "bin/denogear")
ENDIF(WIN32 AND NOT UNIX)

INCLUDE(CPack)

INSTALL(FILES README.txt COPYING.txt DESTINATION ${CMAKE_DOC_DIR})
#INSTALL(FILES lambda.pl outsplit.pl nexus2fasta.pl varrep.pl DESTINATION ${CMAKE_DATA_DIR})

ADD_SUBDIRECTORY(src)

